/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'tom' at '9/14/16 9:09 PM' with Gradle 2.10
 */
// Import common tasks
apply from: "..${File.separator}automation-utilities${File.separator}build${File.separator}build.support.gradle"

// Define dependencies to copy over in the copyDependencies task
ext.dependencies = ["automation-utilities", "python_lifx_sdk"]

// Define executables that must be present on the system to do a native deploy and run
ext.requiredNativeExecutables = ["virtualenv","daemonize"]

// Overwrite the build task in build.support
build {
   dependsOn copyDependencies
   dependsOn copySources
   dependsOn parseTemplates

   // Create a dependency tree of copySources->copyDependencies->parseTemplates
   copyDependencies.mustRunAfter copySources
   parseTemplates.mustRunAfter copyDependencies
}

// Runs an application that does not use Docker
runNativeApplication << {
	
	Properties props = loadProperties()
	String home = getProjectDirectory()
	exec {
		executable "daemonize"
		workingDir "${buildDir}"
		args=["-e", "${home}${File.separator}err",
			  "-o", "${home}${File.separator}out",
			  "-p", "${home}${File.separator}pid",
			  "${buildDir}${File.separator}venv${File.separator}bin${File.separator}gunicorn",
           "--worker-class", "eventlet",
           "-w", "1",
			  "-b", "0.0.0.0:${props.applicationPort}",
			  "app:app"]
	}
}

// Creates an application that does not use Docker
deployNativeApplication << {
	exec {
		executable 'virtualenv'
		args "${buildDir}${File.separator}venv"
	}
	exec {
		executable "${buildDir}${File.separator}venv${File.separator}bin${File.separator}pip"
		args=["install","-r","${buildDir}${File.separator}requirements.txt"]
		workingDir "${buildDir}"
	}
}

// Terminates an application not using Docker
terminateNativeApplication << {
	try {
		// Read the pid of the currently running process (started with daemonize)
		String home = getProjectDirectory()
		String currentPid = new File("${home}${File.separator}pid").text.trim();
		
		exec {
			executable 'kill'
			args=["-9",currentPid]
		}
		
		delete "${home}${File.separator}pid"
	}
	catch (Exception ex) {
		println "Native application not currently running"
	}
}
